;-------------------------------------------------------------------
; LITEDOS SOURCE CODE (C) MR-ATARI 2018
;-------------------------------------------------------------------
; SUPPORT LOAD/SAVE/LIST/ENTER ETC CALLED BY USERS
; SUPPORT BINARY LOAD/EXECUTE (COMMAND-LINE)
;
; COMPATIBLE WITH ANYDOS USING VTOC-SECTORS 360-368 AND SUB-DIRECTORIES
;
; TO INCREASE SUPPORT OF LARGER DISKS, CLUSTERS OF 2 SECTORS MINIMUM ARE USED
; TO MINIMIZE MEMORY USAGE IT USES/SHARES THE CASSETTE BUFFER FOR IO
; TO SUPPORT MORE/LESS FILES, VTOC IS LINKED TO CLUSTERSIZE
;
; MAXIMUM OPEN FILES	: 2, 1 READ/DIR SD/DD(*) + 1 WRITE (SD)
; SPECIAL FUNCTIONS 	: NONE
; MAXIMUM FILES ON DISK : 8-510 (DEPENDING ON CLUSTERS/DISK SIZE)
; CLUSTER SIZE		: 2-128  (256b-32k, DEPENDING ON DISK SIZE)
; MAXIMUM DISK SIZE	: READ 8/16Mb SD/DD(*), WRITE 8Mb SD
; DENSITY SUPPORT	: READ SD/DD(*), WRITE SD
; OS-SUPPORT		: 400/800/XL/XE
;
; (*) CAN BE INCOMPATIBLE WITH RUNNING SOFTWARE, USES PAGE 4 AS READ-BUFFER
;-------------------------------------------------------------------
;	FMS SD-SECTOR LAYOUT
;
;BYTE	FUNCTION
;0-124	125 BYTES OF DATA (MAX)
;125	8 BIT LINK-SECTOR-HI		;LAST SECTOR OF FILE READS ZERO
;126	8 BIT LINK-SECTOR-LO		;LAST SECTOR OF FILE READS ZERO
;127	BYTES IN USE		;LAST SECTOR OF FILE READS LESS THEN 125
;-------------------------------------------------------------------
;	VTOC/DIRECTORY LAYOUT
;	2-128 SECTORS, 360-361/256-383		;CLUSTER-SIZE DEPENDENT
;	1 SECTOR VTOC #360			;ALWAYS #360
;
;BYTE	FUNCTION
;0	FLAG			;$60 LITEDOS, COMPATIBILITY, "PROTECTED FILE"
;				;%0000.0000	EMPTY
;				;%0XX0.XXXX	IN USE BY SOMETHING
;				;%XXX1.XXXX	MYDOS SUBDIRECTORY-LINK
;				;%1XXX.XXXX	DELETED
;1,2	SIZE SECTORS		;LO, HI
;3,4	START FILE/SUB (16 BIT)	;LO, HI
;5-12	FILENAME		;8 CHARACTERS, PADDES WITH SPACE
;13-15	EXT			;3 CHARACTERS, PADDED WITH SPACE
;-------------------------------------------------------------------
;	LITEDOS VTOC LAYOUT, SECTOR 360
;
;BYTE	FUNCTION
;0	DOSTYPE			;MINUS+(CLUSTER-SIZE)
;1,2	DISKSIZE		;USABLE SECTORS (720/1040/X-1)
;3-15	"LiteDOS(c)MrA"		;COPYRIGHTS
;16-31	"------VTOC------"	;TEXT
;32-95	BITMAP LITEDOS		;64 BYTES EQUALS 512 CLUSTERS (510 FILES)
;96-111 "-----512BIT-----"	;TEXT
;112	RESERVED
;113,114FREE SECTORS		;FREE SECTORS ON DISK (NOT CLUSTERS)
;115-127"FreeSectors"		;TEXT
;-------------------------------------------------------------------
;	SOME SUPPORTED FORMATS:
;DISK	SECTORS	CLUSTER-SIZE	VTOC-BUFFER	FILES
;810    720       2 SECTORS     45 BYTES        8
;810	720	  4 SECTORS   22.5 BYTES	24
;1050	1040	  4 SECTORS   32.5 BYTES	24
;HDD	2048	  4 SECTORS	64 BYTES	24
;HDD	4096	  8 SECTORS	64 BYTES	56
;HDD	8192	 16 SECTORS	64 BYTES	120
;HDD	16384	 32 SECTORS	64 BYTES	248
;HDD	32768	 64 SECTORS	64 BYTES	510
;HDD	65536	128 SECTORS	64 BYTES	510
;-------------------------------------------------------------------
;	STANDARD OS LABELS
	.INCLUDE LABELS.ASM
;-------------------------------------------------------------------
;	EXTRA LABELS

DSIZE	= $2E0			;USAGE, DELETE / SAVE
RUNAD	= $2E0			;USAGE, BLOAD
INITAD	= $2E2			;USAGE, BLOAD

;	VALUES
DOSSIZ	= $0F			;SIZE FOR LITEDOS
VTODOS	= 360			;VTOC SECTOR ANYDOS
DIRSEC	= 361			;FIRST DIRECTORY SECTOR

;CIO-VALUES
DIOCB	= ICIDNO		;IOCB*16
DMODE	= ICAX1Z		;MODE
DDATA	= CIOCHR		;DATA BYTE
;DSDOS	= ICAX2Z		;DISK-TYPE !! USING ICAX2Z IS NOT COMPATIBLE !!

;BUFFER (VECTOR)
;DBUF	= BUFADR		;BUFFER-ADDRESS (USED BY DSKINV)

;DOSTYPE
;LITEDOS			;0-------
;OTHERDOS			;1-------
;+FILE-ID			;11------
;LITEDOS, MINIMUM CLUSTERSIZE	;-0000001 =2
;MAXIMUM CLUSTERSIZE		;-1111111 =128

;BUFFERS
DRBUF	= $400			;256  BYTE READ BUFFER, SD/DD
DWBUF	= $E00			;128  BYTE WRITE BUFFER, SD
EDBUF	= $E80			;     IO/EDITOR BUFFER
EDSIZ	= $30			;BUFFER SIZE
FILEN	= $EB0			;11+5 BYTE FILENAME DECODING + WRITE VARIABLES
VTOBUF	= $EC0			;64   BYTE RESERVED FOR VTOC-BITMAP

;GLOBAL
DBUFFER	= FMSZPG+0		;13X BUFFER USAGE

;DIRECTORY
DSPTR	= $3D			;9X CURRENT DIRECTORY POINTER
DSDOS	= $3E			;3X DOSTYPE DIR
DSMAX	= $3F			;5X MAX SECTORS DIR
HISEC	= $40			;2X TEMP, #SECTORS HIGH-BYTE
DSDIR	= RAMLO			;2X ROOT FILE-POINTER (4BIT)
DSSEC	= RAMLO+1		;6X ROOT DIR-SECTOR

;READING
DRDOS	= FMSZPG+1		;3X DOSTYPE READ
DRPTR	= FMSZPG+2		;7X BUFFER POINTER
DRDEN	= FMSZPG+3		;4X ($7F OR $FF)

;WRITING
DWDOS	= FMSZPG+4		;8X DOSTYPE WRITE
DWPTR	= VTOBUF-1		;5X BUFFER POINTER
FMSNE1	= FMSZPG+5		;10X NEXT FREE SECTOR
FMSNE2	= FMSZPG+6		;7X
DWDIR	= VTOBUF-2		;3X WRITE FILE-POINTER
DWSEC	= VTOBUF-3		;2X WRITE DIR-SECTOR
;DWFIL	= VTOBUF-5		;FILE-ID (DOS 2)

;DUPDUP
DUPDRV	= VTOBUF-4		;2X DRIVE-ID

;-------------------------------------------------------------------

	*= $680

;-------------------------------------------------------------------
;	1 DISK BOOT SECTOR, LOADS INTO WRITE-BUFFER.
;-------------------------------------------------------------------
FMS	.BYTE	0
	.BYTE	1		
	.WORD	DWBUF	
	.WORD	INIT
;-------------------------------------------------------------------
;LOADER  $E00 (WRITE BUFFER)
;LITEDOS/LITEDUP $700-$F00
;-------------------------------------------------------------------
;	BOOT ROUTINE, SD-ONLY
;-------------------------------------------------------------------
	LDX	#WMES+DWBUF-$680&$FF	;SEND OUT WELCOME MESSAGE
	LDY	#WMES+DWBUF-$680/256	;$680 -> $E00
	STX	ICBAL		;LO
	STY	ICBAH		;HI
	STX	ICBLL		;LENGTH ($58)
	LDX	#SEIOCB		;SCREEN
	LDA	#PUTREC		;SEND
	STA	ICCOM		;COMMAND
	JSR	CIOV		;DO IT

;	AFTER 1 SECTOR BOOT, WE ONLY NEED TO SET DBUFFER

	LDA	#7		;BUFFER $0700 UP
	STA	DBUFHI

;	CONTINUE BOOTING AFTER THE WELCOME MESSAGE

BOOTL	INC	DAUX1		;NEXT SECTOR

	JSR	DSKINV		;DIO (WE ARE STILL ON D1/READ)

SKIP	LDA	DBUFLO		;BUFFER + $0080
	EOR	#$80
	STA	DBUFLO
	BNE	BOOTL
	INC	DBUFHI		;NEXT PAGE
	LDA	DBUFHI
	CMP	#DOSSIZ-1	;DONE?
	BNE	BOOTL	

;	SET DUP-VECTOR (DOS-COMMAND)

	LDA	#DUPV&$FF
	STA	DOSVEC
	LDA	#DUPV/256
	STA	DOSVEC+1

;	EXIT BOOT-STRAP

AUTO	LDA	DWBUF+$7F	;BOOTFLAG
	BEQ	NOAUTO

	JSR	INIT		;INSTALL D:
	JSR	DUPSET		;SETUP BUFFERS
	LDX	#6		;COPY "D1:*.*",$9B
	JSR	DUPLOAF		;LOAD FIRST FILE IT FINDS....

NOAUTO	CLC			;BOOT SUCCESFUL
	RTS

	.WORD	DUPV
;-------------------------------------------------------------------
WMES	.BYTE	"LiteDOS 1.08 (c) Mr.Atari 2018",$9B
;-------------------------------------------------------------------

	*=	$6FF

AUTOL	.BYTE	0		;AUTORUN-FLAG, ZERO = OFF

;	SECTORS 2 AND 3 ARE PART OF LITEDOS.

;-------------------------------------------------------------------
;	LITEDOS STARTS HERE
;-------------------------------------------------------------------

	*= $700

;-------------------------------------------------------------------
;	DEVICE-HANDLER-TABLES
;-------------------------------------------------------------------
HDISK	.WORD	DOP-1		;OPEN FILE
	.WORD	DCL-1		;CLOSE FILE
	.WORD	DGB-1		;GET BYTE
	.WORD	DPB-1		;PUT BYTE (OVERWRITTEN IN DIL-1)
	.WORD	DIL-1		;DST-1;FILE STATUS
	.WORD	DIL-1		;DSP-1;SPECIAL
;-------------------------------------------------------------------


;-------------------------------------------------------------------
;	INIT/RESET (RESPECT OTHER DEVICES, 850 COMPATIBLE)
;-------------------------------------------------------------------
;	CLEAR BUFFER-STATUS, CHECK DEVICE-TABLE (SET LOMEM), INSTALL DEVICE 

INIT	LDX	#0
	STX	DBUFFER		;FREE BUFFER(S)

ININXT	INX
	INX
	INX

	LDA	HATABS,X	;IS THERE A DEVICE PRESENT ?
	BEQ	INIOKE		;NO
	CMP	#'D'		;1.07 CHECK DOUBLE D:
	BNE	ININXT

INIOKE	LDA	#'D'
	STA	HATABS,X	;SET D: IN TABLE
;	LDA	#HDISK&$FF
;	STA	HATABS+1,X	;$0, SHOULD BE ZERO AFTER RESET...
	LDA	#HDISK/256
	STA	HATABS+2,X	;$7

	LDA	#DOSSIZ		;CHECK IF MEMLO IS ALREADY SET
	CMP	MEMLO+1
	BCC	NOMEM		;YES
	STA	MEMLO+1
	LDA	#0
	STA	MEMLO		;LO

NOMEM	RTS
;-------------------------------------------------------------------


;-------------------------------------------------------------------
;	OPEN COMMAND
;-------------------------------------------------------------------
DOP	LDA	ICDNOZ		;DRIVE-ID
	STA	DUNIT
	LDA	#STATC
	STA	DCOMND
	JSR	DSKINV		;DO STATUS
	BMI	DIL2		;BAD DRIVE

	JSR	SETVTO		;NO READ YET, NEED TO SET DENSITY FIRST...

	LDA	DMODE		;CHECK OPEN-BITS
	BEQ	DIL		;ERROR, NOTHING SET
	AND	#%11111001	;MASK DIR/READ
	BEQ	DOP1		;OK, DIR/READ
	CMP	#8
	BNE	DIL		;ERROR, ILLIGAL USAGE OF BITS
	JMP	ODO		;OPEN FOR WRITE

DIL	LDY	#146		;HANDLER/FUNCTION NOT IMPLEMENTED
DIL2	RTS			;ERROR-CODE IN Y

DOP1	LDA	DBUFFER		;CHECK READ/DIR BUFFER
	BPL	DOP2

	LDY	#161		;TO MANY OPEN FILES
	RTS

DOP2	LDA	DVSTAT
	AND	#$20		;GET DENSITY
	ASL	A
	ASL	A
	ORA	#%01111111	;$7F OR $FF
DOPSD	STA	DRDEN		;STORE (DENSITY-1)

	JSR	REABUF		;DETECT DOSTYPE
	BMI	DIL2		;IO-ERROR
	LDA	DRBUF
	EOR	#$80		;MASK LITEDOS
;	BPL	DOP21		;OK
;	CMP	#$BC		;APE MIRROR...USES FILE-CHECK...
;	BEQ	APE
;	CMP	#$83		;CHECK ATARIDOS VERSION
;	BCS	DOP21		;3 OR HIGHER (NO FILECHECK), BIT6 IS ALWAYS CLEAR
;APE	ORA	#$40		;SET FILECHECK (BIT6)

DOP21	;STA	DRDOS		;STORE (DOS-TYPE), USE DRDOS IN SDIR
	JSR	SDIR		;SEARCH FILENAME IN (SUB)DIRECTORY
	BMI	DOP3		;ERROR-STATUS
	LDY	DSPTR		;SEARCH-POINTER
DOP3	STY	DRPTR		;FILE-POINTER OR ERROR

	LDA	DMODE		;OPEN DIRECTORY, DONE, POINTER SET (OR ERROR-CODE)
	AND	#2
	BNE	DOPDIR		;ERROR-CODE WILL SEND OUT "EOF" ON FIRST READ

	TYA			;CHECK POINTER OR ERROR
	BMI	DIL2		;IO-/FILE-ERROR

	LDX	DRDEN		;DENSITY-1
	STA	DRBUF-0,X	;POINTER -> BUFFER SIZE (SET BUFFER USED)
	LDA	DRBUF+3,Y	;START-SECTOR
	STA	DRBUF-1,X	;LO
	LDA	DRBUF+4,Y	;START-SECTOR
	STA	DRBUF-2,X	;HI

	LDA	DRBUF+0,Y	;FILE-TYPE
	AND	#$04		;0=FILE-CHECK
	ROL	A
	ROL	A
	ROL	A
	ROL	A
	ORA	DSDOS		;DOSTYPE
	STA	DRDOS		;ADD BIT6 OR NOT

DOPDIR	LDA	DBUFFER		;BUFFER STATUS
	ORA	DIOCB		;INCLUDE IOCB-ID
	ORA	#$80		;BUFFER IN USE
	STA	DBUFFER		;STORE

;	EXIT

	BNE	DCL3		;OK
;-------------------------------------------------------------------


;-------------------------------------------------------------------
;	CLOSE COMMAND
;-------------------------------------------------------------------
DCL	LDX	DMODE		;CHECK MODE
	CPX	#8
	BNE	DCL2		;READ/DIR

KILL2	JMP	DCLWRI		;CLOSE ON WRITE

DCL2	LDA	DBUFFER		;CHECK IF VALID CLOSE
	AND	#$70
	CMP	DIOCB
	BNE	DCL3		;OTHER IOCB (OS: CLOSE AFTER FAILURE TO OPEN)

	LDA	DBUFFER		;CLOSE BUFFER
	AND	#$0F
	STA	DBUFFER

DCL3	LDY	#1		;OK
DGBERR	RTS
;-------------------------------------------------------------------


;-------------------------------------------------------------------
;	GET BYTE COMMAND, FROM DRBUF
;-------------------------------------------------------------------

;	CIO SHOULD CHECK IF THIS IS A VALID GET BYTE CHANNEL, NOT ME...

DGB	LDA	DMODE		;CHECK OPEN TYPE
	CMP	#06
	BEQ	GETDIR		;DIR ELSE READ
	BCC	DGB1

	LDY	#131		;WRITE ONLY-ERROR
	RTS

;	FROM BUFFER

DGB1	LDY	DRDEN		;DENSITY-1
	LDA	DRPTR		;CHECK BUFFER
	CMP	DRBUF,Y
	BNE	DGB3		;NOT DONE

;	BUFFER USED, READ NEXT IO-SECTOR
	
	LDA	DRBUF-1,Y	;EXTRACT NEXT SECTOR-LO
	STA	DAUX1		;STORE SECTOR-LO

	LDA	DRBUF-2,Y	;EXTRACT NEXT SECTOR-HI
	BIT	DRDOS		;6 BIT, CHECK DOS-STYLE
	BPL	EXTNOE		;LITEDOS, NEVER
	BVS	EXTNOE		;NO FILECHECK
	AND	#%00000011	;USE 2 BIT SECTOR-HI
EXTNOE	STA	DAUX2		;STORE SECTOR-HI
	ORA	DAUX1		;CHECK IF NO MORE SECTORS
	BEQ	DIREOF		;SEND OUT EOF

	JSR	REABUF		;READ NEXT SECTOR
	BMI	DGBERR		;IO-ERROR

;	LDA	DRDOS		;18 BYTES
;	CMP	#$C1		;CHECK FOR DOS 1.0
;	BNE	NODOS1		;OTHER TYPE
;	LDA	DRBUF+127	;GET BYTES IN SECTOR, ZERO MEANS FULL SECTOR
;	AND	#$7F		;MASK END OF FILE BIT, MINUS=SHORT SECTOR
;	BNE	DOS1SEC		;VALUE IS NOW OK TO PROCESS
;	LDA	#$7D		;ELSE SET 125, FIXED BYTES
;DOS1SEC	STA	DRBUF+127	;OVERWRITE WITH CORRECT BUFFER-LENGTH

NODOS1	LDA	#0
	STA	DRPTR		;RESET POINTER

;	BYTE FROM BUFFER

DGB3	TAY
	LDA	DRBUF,Y

;	EXIT (BOTH)

DGB4	INC	DRPTR		;NEXT BYTE FROM BUFFER
	BNE	DCL3		;OK
;-------------------------------------------------------------------


;-------------------------------------------------------------------
;	GET BYTE COMMAND, FROM DIRECTORY
;-------------------------------------------------------------------
GETNXT	JSR	SEANXT		;READ NEXT ENTRY
	BMI	DIREOF		;NO MATCH/ERROR
	LDA	DSPTR		;NEW SEARCH POINTER
	STA	DRPTR		;NEW DIR POINTER

GETDIR	LDY	DRPTR		;GET POINTER (ERROR-CODE ON OPEN OR VALID)
	BMI	GETNXT		;ERROR ON OPEN, PAST POS8, OEL.
	TYA
	AND	#$0F		;POSITION, 14=EOL+SEARCH NEXT
	CMP	#$0E
GETCHA	LDA	DRBUF+2,Y	;OUTPUT CHR(?)
	BCC	DGB4		;NOT EOL

GETEOL	LDA	#$9B		;EOL
	STA	DRPTR		;SET ERROR
	BNE	DGB4		;EXIT

DIREOF	LDY	#136		;EOF
	RTS

;-------------------------------------------------------------------


;-------------------------------------------------------------------
;	STATUS COMMAND
;-------------------------------------------------------------------
;	NOT IN USE...
;-------------------------------------------------------------------


;-------------------------------------------------------------------
;	SPECIAL COMMAND
;-------------------------------------------------------------------
;	NOT IN USE...
;-------------------------------------------------------------------
;	XIO
;	32	RENAME
;	33	DELETE
;	35	LOCK FILE
;	36	UNLOCK FILE
;	39	LOAD/INIT/RUN EXE/OBJ/COM-FILE
;-------------------------------------------------------------------


;-------------------------------------------------------------------
;	SUBROUTINES
;-------------------------------------------------------------------


;-------------------------------------------------------------------
;	BINARY LOAD FROM FILE OPENED IN IOCB #1
;-------------------------------------------------------------------
BLOAD1	JSR	INIDOS		;RUN LAST BLOCK (IF INIT IS SET)/RTS

;	ENTRY IS HERE, RUNAD SET TO 'RTS'

BLOAD	LDA	#NOMEM&$FF	;DEFAULT = RTS
	STA	INITAD		;INIT-ADDRESS
	LDA	#NOMEM/256
	STA	INITAD+1

BLOAD2	JSR	GET2BYT		;GET 2 BYTES (START-ADDRESS)
	BMI	BLOAD3		;DONE ??? BMI NOT NEEDED...
	LDA	DSKFMS+0	;CHECK IF HEADER
	AND	DSKFMS+1
	CMP	#$FF
	BEQ	BLOAD2		;YES, GET NEW 2 BYTES (START-ADDRESS)
	LDA	#$1A
	JSR	GET2BEN		;GET NEXT 2 BYTES (END-ADDRESS)
	BMI	BLOAD3		;DONE ??? BMI NOT NEEDED...

;	CALCULATE LENGTH = END - START + 1 -> SETUP IN IOCB #1

	INC	DSKFMS+2
	BNE	DONEND
	INC	DSKFMS+3	;(END+1)

DONEND	LDA	DSKFMS+0
	STA	ICBAL+$10	;START-LO
	LDA	DSKFMS+1
	STA	ICBAH+$10	;START-HI
	SEC
	LDA	DSKFMS+2	;END-1-LO
	SBC	DSKFMS+0	;START-LO
	STA	ICBLL+$10	;LENGTH-LO
	LDA	DSKFMS+3	;END-1HI
	SBC	DSKFMS+1	;START-HI
	STA	ICBLH+$10	;LENGTH-HI

	JSR	DO1REA		;GET BLOCK
	BPL	BLOAD1

;	ON ERROR, RUN LOADED FILE...

BLOAD3	LDA	#CLOSE		;CLOSE IOCB
	JSR	DO1COM

	JMP	(RUNAD)		;DEFAULT = RTS

;	DO PARTIAL CODE...

INIDOS	JMP	(INITAD)	;DEFAULT = RTS
;-------------------------------------------------------------------


;-------------------------------------------------------------------
;	IO-READ RELATED ROUTINES
;-------------------------------------------------------------------


;-------------------------------------------------------------------
;	SET VTO-SECTOR
;-------------------------------------------------------------------
SETVTO	LDA	#VTODOS&$FF	;SET READ VTOC
	STA	DAUX1
	LDA	#VTODOS/256
	STA	DAUX2		;NO READ YET, NEED TO SET DENSITY FIRST...
	RTS
;-------------------------------------------------------------------


;-------------------------------------------------------------------
;	IOCB #1 SUBROUTINES
;-------------------------------------------------------------------
GET2BYT	LDA	#DSKFMS		;BUFFER

GET2BEN	STA	ICBAL+$10	;A=BUFFER-LO
	LDA	#$00
	STA	ICBAH+$10
	STA	ICBLH+$10
	LDA	#$02		;2 BYTES
	STA	ICBLL+$10

DO1REA	LDA	#GETCHR		;COMMAND GETDATA
	BNE	DO1COM

;DCLOS1	LDA	#CLOSE		;USED 2X = SAME NUMBER OF BYTES
;	BNE	DO1COM

DOPEN1W	LDA	#$08		;OPEN WRITE
	BNE	DOPEN11
DOPEN1D	LDA	#$06		;OPEN DIR
	BNE	DOPEN11
DOPEN1R	LDA	#$04		;OPEN READ
DOPEN11	STA	ICAX1+$10
	LDA	#OPEN		;COMMAND OPEN

DO1COM	STA	ICCOM+$10	;COMMAND

DOCIO1	LDX	#$10		;GENERAL ENTRY ON IOCB #1
DOCIO	JMP	CIOV		;DO IO/RTS
;-------------------------------------------------------------------


;-------------------------------------------------------------------
;	READ (DAUX),(DMODE) SUPPORT SD/DD ON 400/800
;-------------------------------------------------------------------
REABUF	LDA	#READ		;COMMAND
	STA	DCOMND		;COMMAND

	LDA	#GETDAT		;DATA SIO->ATARI
	STA	DSTATS		;DIRECTION

	LDX	DRDEN		;BUFFER-DENSITY
	LDA	DMODE		;R/W ?
	AND	#4
	BNE	SETBUF		;READ/DIR
WRITEN	LDA	#DWBUF/256
	LDX	#$7F		;WRITE, ALWAYS SD
SETBUF	STA	DBUFHI		;4 OR DWBUF, X=DENSITY-1

	LDY	#$00
	STY	DBUFLO		;BUFLO ALWAYS ZERO...
	INX			;X=DENSITY
	BMI	RWBUF2		;SD
	INY			;0->1 DD
RWBUF2	STY	DBYTHI		;(DSCTLN+1)
	STX	DBYTLO		;(DSCTLN)

	LDA	ICDNOZ		;DRIVE ID
	STA	DUNIT		;DRIVE-ID

	LDA	#DIOT		;TIME-OUT
	STA	DTIMLO

	LDA	#DISKID		;DEVICE D:
	STA	DDEVIC

	JMP	SIOV		;SIO-VECTOR/RTS
;-------------------------------------------------------------------


;-------------------------------------------------------------------
;	ABOUT $900 ....
;	FROM HERE, ALL CAN BE ERASED IF WE ARE LOADING TO RUN A GAME
;-------------------------------------------------------------------


;-------------------------------------------------------------------
;	IOCB #2 SUBROUTINES
;-------------------------------------------------------------------
DO2COM	STA	ICCOM+$20	;COMMANDO #2
	LDX	#$20		;GENERAL ENTRY ON IOCB #2
	BNE	DOCIO
;-------------------------------------------------------------------


;-------------------------------------------------------------------
;	WRITE WITH COUNTER (DSIZE)
;-------------------------------------------------------------------
WRIBUFS	INC	DSIZE		;INCREASE SIZE
	BNE	WRIBUF
	INC	DSIZE+1
;-------------------------------------------------------------------


;-------------------------------------------------------------------
;	WRITE(DAUX),(DWBUF) [OPTIONAL; DENSITY, SD/DD ON 400/800]
;-------------------------------------------------------------------
WRIBUF	LDA	#PUTSEC		;FAST WRITE COMMAND
	STA	DCOMND		;COMMAND

	LDA	#PUTDAT		;DATA SIO->ATARI
	STA	DSTATS		;DIRECTION

	BNE	WRITEN
;-------------------------------------------------------------------


;-------------------------------------------------------------------
;	DECODE FILENAME, SEARCH [SUB]DIRECTORY, CALCULATE SIZE
;-------------------------------------------------------------------
SDIR	STA	DSDOS		;ENTRY A = DOSTYPE

	LDY	#0		;CHAR-POINTER
	STY	DSSEC		;ROOT

ODISTA	LDX	#$F5		;FILENAME-POINTER $Fx-56789ABD.EF0

ODICHR	LDA	(ICBALZ),Y	;GET CHR IN FILENAME
	;BNE	ODISKP		;ZERO -> SPACE
	;LDA	#$20
ODISKP	INY			;NEXT INPUT CHARACTER

;	":" <CR>  "."  "*" SPECIAL, REST ARE ALL VALID

	CMP	#':'		;START MARKER
	BEQ	ODISTA		;RESET/START(AGAIN)
 
ODICOD	CMP	#$9B		;CHECK EOL
	BNE	ODINOS		;ACCEPT AS SPACE, FORCE START
ODISPC	LDA	#$20		;PAD WITH SPACE
ODIFIL	DEY			;STAY AT THIS CHR ('CR' '.')

ODINOS	CMP	#'.'		;CHECK '.', FORCE POSITION TO EXT
	BNE	ODINOD
	CPX	#$F5+8		;NAME->EXT
	BCC	ODISPC		;NOT YET, FILL SPACE STAY AT '.'
	;LDX	#$F5+9		;??? TRUNC SURPLUS-NAME TO 8 CHARACTERS
	BCS	ODICHR		;DON'T USE THIS CHARACTER

ODINOD	CMP	#'*'		;SPECIAL CHAR, REPLACE '*' BY PADDED '?'
	BNE	ODINAM
	LDA	#'?'		;REPLACE WITH "?"
	CPX	#$F5+7		;LAST CHAR OF NAME
	BEQ	ODINAM
	CPX	#$F5+10		;LAST CHAR OF EXT
	BCC	ODIFIL		;NO, 0-6/8-9 STAY ON THIS CHAR

;	ROUTINE IS NOT PERFECT, IT ACCEPTS ILLIGAL NAMES.

ODINAM	STA	FILEN-$F5,X	;NAME
	INX			;NEXT DECODED CHARACTER
	BNE	ODICHR		;<11 CHAR> DECODED

;	CHECK FOR OPEN DIRECTORY ON LITEDOS

ODIDON	LDA	#9		;ATARIDOS, DIR #SECTORS WITH VTOC
	STA	DSMAX

	LDX	DSDOS		;CHECK LITEDOS
	BMI	DIRATA		;NO
	INX
	STX	DSMAX		;+1, DIR SECTORS WITH VTOC

	LDA	DMODE		;CHECK DIRECTORY ACCESS
	CMP	#6
	BNE	DIRATA		;NO, SCAN FILES (R/W)

	LDA	#$70		;SENDOUT FREE SECTORS FIRST
	STA	DSPTR
	JMP	DOSIZ		;CALCULATE SIZE / MATCHING FILE / EXIT

;	SCAN ENTRIES

SEANXT	CLC			;NEXT ENTRY
	LDA	DSPTR
	AND	#$F0		;DSPTR USED IN GETDIR
	ADC	#$10
	TAY
	BPL	DIRSEA		;SAME SECTOR

;	NEXT DIR SECTOR

DIRATA	INC	DAUX1		;NEXT VTOC
	BNE	DIRATA2
	INC	DAUX2		;THERE IS NO SECTOR $0000.....

DIRATA2	LDX	DSDOS		;CHECK LITEDOS
	BMI	DIRBOT		;NO
	LDA	DAUX1
	BPL	DIRNBOU		;NO BOUNDARY LITEDOS
	TXA			;CLUSTERS
	EOR	#$FF		;MASK LOWER
	AND	#VTODOS&$FF	;GET UPPER
DIRNBOU	CMP	#VTODOS&$FF	;CHECK IF VTOC
	BEQ	DIRATA		;YES, +1
	STA	DAUX1		;STORE

;	CONTINUE

DIRBOT	DEC	DSMAX		;NUMBER OF DIR SECTORS
	BNE	DIROK		;OK

	LDA	DMODE		;NO MORE DIR SECTORS
	CMP	#8
	BNE	DIRFNF		;READ/DIR, SENDOUT FILE NOT FOUND

	LDY	#169		;WRITE, SEND OUT DIRECTORY FULL
	RTS

;	READ NEW SECTOR

DIROK	JSR	REABUF		;GO READ SECTOR FROM DISK
	BMI	DIRERR		;IO-ERROR
	DEY	;LDY	#0	;(Y=1) 0=START

;	CHECK FILE-STATUS

DIRSEA	STY	DSPTR		;DIR SEARCH POINTER

;	FIRST, SET CORRECT BUFFER IN CODE, MUST BE PAGE-START...

	LDA	DMODE		;WHAT BUFFER TO USE?
	AND	#4
	BNE	DIRSEAB		;$400
	LDA	#DWBUF/256	;DWBUF
DIRSEAB	STA	DIRREA+2	;SET CORRECT BUFFER-AREA
	STA	CHKCHKB+2	;SET CORRECT BUFFER-AREA

;	GET STATUS

DIRREA	LDA	DRBUF,Y		;READ/WRITE-BUFFER, CHECK IF FILENAME IN USE
	BNE	DIRSEA1		;YES

;	FILE NOT FOUND, CHECK SUBDIR ACCESS (MYDOS ONLY)

DIRFNF	LDA	DSSEC		;ARE WE DOING SUB-DIR?
	BEQ	DIRFFF		;NO, SET FILE NOT FOUND

	STA	DAUX1		;ROOT-LO
	LDA	#DIRSEC/256	;CONTINUE IN ROOT
	STA	DAUX2		;ROOT-HI
	JSR	REABUF		;BACK TO ROOT-SECTOR
	;LDA	#0		;A=ZERO AFTER IO
	STA	DSSEC		;ROOT
	LDA	DSDIR
	STA	DSPTR		;RELOAD POINTER
	;SEC			;C=SET AFTER IO
	LDA	#DIRSEC&$FF+8
	SBC	DAUX1
	STA	DSMAX		;RELOAD MAXIMUM SECTORS TO READ
SEANXTL	BNE	SEANXT		;CONTINUE IN ROOT

DIRFFF	LDY	#170		;SET FILE NOT FOUND
DIRERR	RTS			;IO-ERROR IN Y

;	CHECK SUB-DIR AND PROCESS IT

DIRSEA1	LDX	DSSEC		;ONE LEVEL ONLY...
	BNE	DIRSEA2

	CMP	#$10		;CHECK FOR SUB
	BNE	DIRSEA2		;NO
	LSR	A
	STA	DSMAX		;8 SECTORS TO READ
	LDA	DAUX1
	STA	DSSEC		;SET ROOT/POSITION
	LDY	DSPTR
	STY	DSDIR
	LDA	DRBUF+3,Y	;GET DAUX1
	STA	DAUX1		;CHANGE DIR-ENTRY
	LDA	DRBUF+4,Y	;GET DAUX2
	STA	DAUX2	
	JMP	DIROK		;GET NEW DIR	

;	CHECK NAME

DIRSEA2	LDX	#0		;01234567890
CHKCHK	INY			;----0011
CHKCHR	LDA	FILEN,X		;GET CHR IN FILENAME
	CMP	#'?'		;CHECK WILDCARDS
	BEQ	DUMMYOK		;? ALWAYS OK
CHKCHKB	CMP	DRBUF+4,Y	;READ/WRITE-BUFFER
	BNE	SEANXTL		;NO, DO NEXT FILE ENTRY
DUMMYOK	INX
	CPX	#11
	BNE	CHKCHK

DIRWRI	LDA	DMODE		;CHECK IF WRITE
	CMP	#8
	BEQ	DIREND		;WRITE, OK

;	DMODE IS READ

	LDX	DRBUF-15+4,Y	;FILE STATUS
	BMI	SEANXTL		;DELETED, DO NOT SHOW

;	CALCULATE FILE-SIZE

	;LDA	DMODE		;DIR?
	AND	#2
	BEQ	DIREND

;	0, 1, 2, 3, 4, 5-12,13-15
;	ID,LL,LH,SL,SH,NAME.EXT

DOSIZ	LDX	DSPTR		;POINTER
	LDY	DRBUF+2,X	;VALUE-HI
	INY
	STY	HISEC		;STORE
	LDA	DRBUF+1,X	;VALUE-LO

DIRCALC	LDY	#3		;FIRST DECTAB
NEXDIG	PHA			;STORE
	LDA	#$B0		;START WITH ZERO
	STA	DRBUF+2,X	;STORE
	PLA			;RELOAD
NEXVAL	CMP	DECTAB-1,Y	;CAN WE SUBTRACT
	BCC	NEXDEC		;NO
NEXHIG	SBC	DECTAB-1,Y	;YES, DO IT
	INC	DRBUF+2,X	;INCREASE
	BNE	NEXVAL		;ANOTHER TIME?
NEXDEC	CPY	#3
	BNE	NEXSML		;IF (100) THEN DECREASE HIGHBYTE FIRST TO ZERO/REPEAT
	DEC	HISEC
	BNE	NEXHIG
NEXSML	INX			;NEXT POSITION
	DEY			;NEXT DECTAB
	BNE	NEXDIG		;LOOP

	LDA	DRBUF-1,X	;IF TO BIG, SHOW +++
	SBC	#$AF		;CARRY IS SET HERE
	CMP	#$0A		;0-9 OK
	BCC	DIREND
DODIRB	LDA	#'+'+$80	;MAXIMUM
	STA	DRBUF-1,X
	STA	DRBUF-0,X
	STA	DRBUF+1,X

;-------------------------------------------------------------------

DIREND	INY
	RTS
;-------------------------------------------------------------------


;-------------------------------------------------------------------
;	OPEN FOR WRITE COMMAND
;-------------------------------------------------------------------
ODO	LDA	DBUFFER		;CHECK IF FREE
	LSR	A
	BCC	ODO1		;YES

	LDY	#161		;TOO MANY OPEN FILES
	RTS

ODO1	LDA	DVSTAT		;GET DENSITY
	AND	#$20
	BNE	ODO2		;SD ONLY...

	JSR	REABUF		;DETECT DOSTYPE
	BMI	ODOER

	LDY	#63		;COPY VTOC TO VTOBUF
DSKVFR	LDA	DWBUF+32,Y
	STA	VTOBUF,Y
	DEY
	BPL	DSKVFR

	LDA	DWBUF		;CHECK DOSTYPE
	BMI	ODO3		;LITEDOS, OK

ODO2	LDY	#176		;WRONG DOS-ERROR
ODOER	RTS

ODO3	AND	#$7F		;CLUSTER-SIZE

	STA	DWDOS		;USE DWDOS
	JSR	SDIR		;SEARCH FILENAME IN (SUB)DIRECTORY
	CPY	#170		;FILE NOT FOUND
	BEQ	ODO4		;OK

	TYA			;CHECK FOR OTHER ERRORS
	BMI	ODOER		;EXIT

ODO4	LDA	DIOCB		;OPEN BUFFER
	LSR	A
	LSR	A
	LSR	A		;IOCB-INDEX
	ORA	#$01		;BUFFER IN USE
	ORA	DBUFFER	
	STA	DBUFFER		;FILE OPEN

	LDY	DSPTR
	STY	DWDIR		;STORE DIRECTORY POINTER

	LDA	DAUX1
	STA	DWSEC		;STORE DIRECTORY SECTOR

;	FILE-ID IS NOT COMPATIBLE WITH "LITEDOS-ONLY" FORMAT
;
;	SEC			;CALCULATE FILE-ID
;	SBC	#DIRSEC&$FF	;RELATIVE DIRSECTOR ($00-$07)
;	CLC			;WE NEED CARRY TO BE ZERO
;	ROR	A		;FIRST ROTATE, 2 BITS USED, PRE-SET CARRY
;	ORA	DWDIR		;UPPER 4 BITS, POINTER ON THIS SECTOR ($00-$70)
;	ROR	A		;NOW MOVE 2 BITS DOWN
;	ROR	A
;	STA	DWFIL		;FILE-ID (DOS 2)

	LDA	DWBUF,Y		;CHECK FILE STATUS
	BMI	ODOWRI		;DELETED FILE, OK
	BEQ	ODONEW		;EMPTY ENTRY

;	FILE IN USE, DELETE THIS FIRST

	LDA	DWBUF+3,Y
	STA	DAUX1		;SECTOR-LO
	LDA	DWBUF+4,Y
	STA	DAUX2		;SECTOR-HI
	JSR	DELETE		;TRACE FILE, FREE VTOC-SECTORS, UPDATE VTOC
	BMI	ODOER		;OH NO...

;	NEW ENTRY OR DELETED FILE

ODONEW	JSR	WRINAM		;WRITE NAME IN DIRECTORY, SET AS DELETED FILE.
	BMI	ODOER

;	ALLOCATE FREE SECTOR

ODOWRI	JSR	ALLOFOR		;FORCE LOCATE A FREE SECTOR -> FMSNE1,2
	BMI	ODOER		;DISK FULL

;	SETUP IO-SECTOR

	LDA	#$7D		;DENSITY
	STA	DWBUF+127	;SIZE
	LDA	FMSNE1		;ALLOCATED SECTOR
	STA	DWBUF+126	;SECTOR-BUFFER
	STA	DSIZE+2		;SECTOR FILE START
	LDA	FMSNE2
	STA	DWBUF+125
	STA	DSIZE+3

	LDA	#0
	STA	DWPTR		;RESET POINTER
	STA	DSIZE		;CLEAR FILE-SIZE
	STA	DSIZE+1

DCLOK	BEQ	DPBEN
;-------------------------------------------------------------------


;-------------------------------------------------------------------
;	PUT BYTE COMMAND
;-------------------------------------------------------------------

DPB	STA	DDATA		;NEEDED FOR MAC65/OTHERS.....
				;THEY DO NOT USE SIOV, NOT STORING A IN ZIOCB...

;	CIO SHOULD CHECK IF THIS IS A VALID PUT BYTE CHANNEL, NOT ME...

	LDX	DMODE		;CHECK OPEN TYPE
	CPX	#08
	BEQ	DPBOK		;WRITE

	LDY	#131		;READ ONLY-ERROR
	RTS

DPBOK	LDY	DWPTR
	CPY	DWBUF+127	;CHECK BUFFER
	BNE	DPBNOF		;NOT FILLED

;	BUFFER FULL, WRITE BUFFER TO DISK FIRST

	JSR	EXPSEC		;ALLOCATE SECTOR, WRITE TO DISK
	BMI	DPBER		;IO-ERROR
	LDY	#0		;Y IS NOT 1 HERE.... ELSE 'DEY' SAVES 1 BYTE
	STY	DWPTR		;RESET POINTER

;	PUT BYTE IN BUFFER

DPBNOF	LDA	DDATA		;GET BYTE
	STA	DWBUF,Y		;PUT IN BUFFER
	INC	DWPTR		;INCREASE POINTER

DPBEN	LDY	#1		;EXIT
DPBER	RTS
;-------------------------------------------------------------------


;-------------------------------------------------------------------
;	CLOSE ON WRITE
;-------------------------------------------------------------------
DCLWRI	LDA	DBUFFER		;CHECK IF VALID CLOSE
	AND	#$0E		;%00001110
	ASL	A
	ASL	A
	ASL	A		;%01110000
	CMP	DIOCB		;$00-$70
	BNE	DPBEN		;OTHER IOCB (BIOS CLOSE AFTER OPEN FAILURE)

;	VALID IOCB

	LDX	#0		;SEND OUT DATA IN BUFFER
	STX	FMSNE1		;NO NEXT SECTOR
	STX	FMSNE2		;(OEF-MARKER)

;	DISKFULL, FMSNE ALREADY ZERO, CLOSE WILL TRY SECTOR $0000....

	LDA	DBUFFER		;CLOSE BUFFER
	AND	#$F0
	STA	DBUFFER

	LDA	DWPTR		;BYTES IN BUFFER
	BEQ	DPBEN		;HAPPENS ON OPEN/CLOSE WITHOUT DATA
				;DIRECTORY UPDATED, ONE FILE-SPACE LESS....
	JSR	EXPSECF		;WRITE TO DISK, NO ALLOCATION, TOGGLE=YES
	BMI	DPBER		;IO-ERROR...(DO NOT UPDATE VTOC/DIR)

	JSR	WVTOC		;UPDATE VTOC
	BMI	DPBER		;IO-ERROR... (WHAT NOW...)

	JSR	PUTFIL		;UPDATE DIRECTORY
	BMI	DPBER		;IO-ERROR... (PFFF...)

	BPL	DPBEN
;-------------------------------------------------------------------


;-------------------------------------------------------------------
;	COMPLETE SECTOR AND SEND IT OUT, MOVE SIZE+FMSNEX TO DSKBUF
;-------------------------------------------------------------------
EXPSEC	JSR	ALLOCAT		;ALLOCATE NEW SECTOR
	BMI	IMPERR		;DISK FULL

	LDA	#$7D
EXPSECF	STA	DWBUF+127	;PUT SIZE IN SECTOR-BUFFER

	JSR	IMPSEN		;GET NEXT IO-SECTOR IN DAUX

	LDA	FMSNE1		;PUT NEXT IO-SECTOR IN BUFFER
	STA	DWBUF+126	;SECTOR-LO
	LDA	FMSNE2
	STA	DWBUF+125	;SECTOR-HI

	JSR	WRIBUFS		;WRITE WITH SECTOR COUNT
	BMI	IMPERR		;IO-ERROR

	JSR	TOGGLE		;WRITE DONE, DO VTOC-BUFFER, DAUX LOST...

	TYA			;Y=0-7, LDY	#1
IMPERR	RTS
;-------------------------------------------------------------------


;-------------------------------------------------------------------
;	MOVE CURRENT IO-SECTOR FROM BUFFER TO DAUX
;-------------------------------------------------------------------
IMPSEN	LDA	DWBUF+126	;GET CURRENT IO-SECTOR FROM BUFFER
	STA	DAUX1
	LDA	DWBUF+125
	STA	DAUX2

NOFIL2	RTS
;-------------------------------------------------------------------


;-------------------------------------------------------------------
;	ALLOCATE CLUSTER, SEARCH FREE CLUSTER AND SET FMSNEX
;-------------------------------------------------------------------
ALLOCAT	INC	FMSNE1		;NEXT SECTOR IN THIS CLUSTER
	BNE	ALLO1
	INC	FMSNE2
	BEQ	ALLOER		;NO MORE FILE-SECTORS....

ALLO1	LDA	FMSNE1		;CHECK FIRST SECTOR OF A CLUSTER
	AND	DWDOS
	BNE	ALLODON		;NO, STILL BUSY WITH THIS CLUSTER

ALLOFOR	LDX	#0		;X=VTOC-BYTE
	STX	FMSNE2		;CLEAR NEW AUX2
	STX	FMSNE1		;CLEAR NEW AUX1

ALLO2	LDA	VTOBUF,X	;READ BITMAP
	BNE	ALLO3		;VALUE MEANS FREE CLUSTER
	INX
	CPX	#64		;MAXIMUM 64 VTOC BYTES TO CHECK
	BNE	ALLO2		;CONTINUE SEARCH
	BEQ	ALLOER		;DISK FULL (FMSNEX ARE CLEARED)

ALLO3	LDY	#0		;Y=VTOC-BIT (0-7)
ALLO4	ASL	A		;SHIFT (NEXT) BIT OUT
	BCS	ALLO5		;SET, THIS CLUSTER IS FREE
	INY
	BPL	ALLO4		;CLEAR (BRANCH ALWAYS)

ALLO5	TXA			;0-31 WITH CARRY (0-63)
	ASL	A
	ASL	A
	ASL	A
	STA	FMSNE1		;X-XXXXX000
	ROL	FMSNE2		;USE CARRY, SUPPORTS 64 BYTE VTOC

	TYA			;0-7
	ORA	FMSNE1
	STA	FMSNE1		;X-XXXXXYYY

	LDA	DWDOS		;GET CLUSTER SIZE
VTSHIFT	ASL	FMSNE1		;CALCULATE START SECTOR OF THIS CLUSTER
	ROL	FMSNE2
	LSR	A
	BNE	VTSHIFT

ALLODON	RTS

ALLOER	LDY	#162		;DISK FULL
	RTS
;-------------------------------------------------------------------


;-------------------------------------------------------------------
;	TOGGLE ALLOCATED CLUSTER, CALCULATE AND TOGGLE CLUSTER FROM DAUX (CHANGED)
;-------------------------------------------------------------------
TOGGLE	LDA	DAUX1		;CHECK FIRST SECTOR IN CLUSTER
	AND	DWDOS
	BNE	TOGGLED		;NO, ALREADY DONE TOGGLE FOR THIS CLUSTER

	LDA	DWDOS		;GET CLUSTER SIZE
TOSHIFT	LSR	DAUX2		;CALCULATE CLUSTER OF THIS SECTOR
	ROR	DAUX1
	LSR	A
	BNE	TOSHIFT		;0000000X-XXXXXYYY IN DAUX
	
	LDA	DAUX1
	TAX			;STORE, SAVE 1 BYTE
	AND	#7
	TAY			;Y=VTOC-BIT 0-7

	TXA			;LOAD
	;LDA	DAUX1
	LSR	DAUX2		;SUPPORTS 64 BYTE VTOC
	ROR	A		;CARRY
	LSR	A		;ZERO
	LSR	A
	TAX			;X=VTOC-BYTE 0-63

	LDA	VTOMSK,Y	;GET MASK
	EOR	VTOBUF,X	;TOGGLE
	STA	VTOBUF,X

TOGGLED	RTS
;-------------------------------------------------------------------


;-------------------------------------------------------------------
VTOMSK	.BYTE	128,64,32,16,8,4,2;,1	;BIT-VALUES
DECTAB	.BYTE	1,10,100		;DEC-VALUES
;-------------------------------------------------------------------


;-------------------------------------------------------------------
;	READ DIRECTORY
;-------------------------------------------------------------------
READIR	LDA	DWSEC		;DIRECTORY SECTOR
	STA	DAUX1
	LDA	#DIRSEC/256	;DEFAULT HIGH-SECTOR
	STA	DAUX2

	JMP	REABUF		;GET THIS SECTOR
;-------------------------------------------------------------------


;-------------------------------------------------------------------
;	DELETE FILE, FOLLOW SECTOR-LINK, FREE CLUSTERS IN VTOC, UPDATE VTOC
;-------------------------------------------------------------------
DELETE	JSR	REABUF		;READ THIS SECTOR
	BMI	TOGGLED		;RTS / IO-ERROR (ABORT OPERATION)

	JSR	TOGGLE		;FREE THIS IO-SECTOR

	JSR	IMPSEN		;EXTRACT NEW IO-SECTOR

	;LDA	DWBUF+125	;CHECK LAST SECTOR, A=DWBUF+125
	ORA	DWBUF+126
	BNE	DELETE		;SECTOR $0000, EOF

;	JMP	WVTOC		;WRITE VTOC AFTER DELETE
;-------------------------------------------------------------------


;-------------------------------------------------------------------
;	WRITE VTOC, WRITE VTOC-BUFFER TO DISK
;-------------------------------------------------------------------
WVTOC	JSR	SETVTO		;DO IO ON THIS SECTOR

	JSR	REABUF		;GET SECTOR

	LDA	#0
	STA	DWBUF+$71	;FREE SECTORS
	STA	DWBUF+$72
	
	LDX	#63		;COPY VTOBUF TO DSKBUF, COUNT BITS
DSKVTO	LDA	VTOBUF,X
	STA	DWBUF+32,X
	LDY	#8		;COUNT BITS
WVTSH	LSR	A
	BCC	WVTNI
	INC	DWBUF+$71
	BNE	WVTNI
	INC	DWBUF+$72
WVTNI	DEY
	BNE	WVTSH		;UNTIL 8 BITS DONE
	DEX
	BPL	DSKVTO		;UNTIL ALL BYTES DONE

	LDA	DWDOS		;CLUSTER-SIZE
WVTRO	ASL	DWBUF+$71	;FREE SECTOR SHIFT
	ROL	DWBUF+$72
	LSR	A
	BNE	WVTRO		;FREE SECTORS NOW VALID

	BEQ	NOTNEW		;WRITE VTOC WITH UPDATED FREE SECTORS
;-------------------------------------------------------------------


;-------------------------------------------------------------------
;	PUT FILENAME IN DIRECTORY, SET AS DELETED FILE
;-------------------------------------------------------------------
WRINAM	JSR	READIR		;GET SECTOR

	LDY	DWDIR		;GET POINTER
	LDA	#$80		;SET NAME, "DELETED FILE"
WRIREN	LDX	DWBUF,Y		;PREVIOUS ID
	STA	DWBUF,Y		;STORE
	BMI	NOTNEW		;EXIT IF THIS IS A DELETED FILE, NAME ALREADY SET

	LDX	#0		;NEW FILENAME
DIRPN1	LDA	FILEN,X		;COPY FILENAME TO DISKBUFFER
	;THIS DOES NOT WORK, NEW NAME IS ZEROD, SO THIS SETS ZERO...
	;CMP	#'?'		;CHECK FOR WILDCARD CHARACTERS
	;BNE	DIRPN2		;OK
	;LDA	DWBUF+5,Y	;REPLACE WITH CURRENT CHARACTER
DIRPN2	STA	DWBUF+5,Y	;PUT IN DISKBUFFER
	INX
	INY
	CPX	#11		;11 CHARACTERS TO GO
	BNE	DIRPN1

NOTNEW	JMP	WRIBUF		;UPDATE DIRECTORY
;-------------------------------------------------------------------


;-------------------------------------------------------------------
;	FILE IN USE & PUT LOCATION/SIZE IN DIRECTORY
;-------------------------------------------------------------------
PUTFIL	JSR	READIR		;GET SECTOR

	LDY	DWDIR		;GET POINTER
	LDA	#$64		;SET NAME IN USE, "PROTECTED FILE,NO FILE-CHECK"
	STA	DWBUF,Y		;FILE-ID

	LDX	#0
PUTFII	INY
	LDA	DSIZE,X		;LENGTH-LO/HI,START-LO/HI
	STA	DWBUF,Y
	INX
	CPX	#4
	BNE	PUTFII

	BEQ	NOTNEW		;UPDATE DIRECTORY
;-------------------------------------------------------------------


;-------------------------------------------------------------------
;	LITEDOS-SHELL
;-------------------------------------------------------------------

DUPSET	LDA	#EDBUF&$FF	;ALL IO, EDBUF, LENGTH $0020 MAX
	STA	ICBAL
	STA	ICBAL+16
	STA	ICBAL+32
	LDA	#EDBUF/256
	STA	ICBAH
	STA	ICBAH+16
	STA	ICBAH+32
	LDA	#$00
	STA	ICBLH
	STA	ICBLH+16
	STA	ICBLH+32
	STA	EDBUF+$1A	;ERASE LAST CHARACTER (RENAME-BUG)

DUPCLO	LDA	#CLOSE		;CLOSE
	JSR	DO1COM		;COMMAND #1
	;LDA	#CLOSE		;CLOSE
	JMP	DO2COM		;COMMAND #2

;-------------------------------------------------------------------
;	DIRECTORY 1-9
;-------------------------------------------------------------------

DUPDIR	STA	DIRSPE+1	;DIRECTORY Dx:
	JSR	DUPCOM		;COPY Dx:*.*

DUPDIRF	LDA	EDBUF+1		;SAVE NEW DRIVE
	STA	DIRSPE+1	;INVALID DRIVE-ID IS CHANGED TO 1 BY CIO...

	JSR	DOPEN1D		;OPEN #1 DIR
DUPCOPL	BMI	DUPB		;ERROR

DUPDIRC	LDA	#EDSIZ		;MAX TRANSFER
	STA	ICBLL+$10
	LDA	#GETREC
	JSR	DO1COM		;READ #1
	BMI	DUPV		;END OF DIR, CLOSE/RETURN
	JSR	SCROUT		;SCREEN
	BPL	DUPDIRC		;LOOP
	BMI	DUPV		;USER PRESSED BREAK...

;-------------------------------------------------------------------
;	DELETE FILE
;-------------------------------------------------------------------

DUPDEL	LDX	#2		;Dx:
	JSR	DUPCOD
	JSR	DOPEN1W		;OPEN #1 WRITE
	BPL	DUPV		;OK, CLOSE WITH SIZE=0

;	BMI	DUPB		;ERROR

;-------------------------------------------------------------------
;	ERROR MESSAGE (Y)
;-------------------------------------------------------------------

DUPB	JSR	DUPBAD		;ERROR-CODE

;-------------------------------------------------------------------
;	DUP ENTRY, NO ERRORS
;-------------------------------------------------------------------
DUPV	JSR	DUPSET		;SHELL-ENTRY

;	GET USER INPUT

	DEY			;ZERO
	DEC	$5E		;CURSOR-1
	LDA	#'>'-$20	;PROMPT
	STA	($5E),Y		;SHOW
	INC	$5E		;CURSOR+1

	LDA	#GETREC
	JSR	SCRCOM

;	LOOK FOR COMMAND

	LDY	#17		;SYNTAX ERROR

	LDA	EDBUF+0		;<CR> = EXIT
	BPL	DUPNEXI
	JMP	WARMSV	

DUPNEXI	CMP	#'P'		;POWERUP
	BNE	DUPNCOL
	JMP	COLDSV

DUPNCOL	CMP	#'D'
	BEQ	DUPDIRF		;DIR WITH VALID ID/FILENAME
	CMP	#'1'
	BCC	DUPNDIR		;LESS THEN D1:
	CMP	#'9'
	BCC	DUPDIR		;D1:-D8:

DUPNDIR	CMP	#'E'		;ERASE
	BEQ	DUPDEL

	CMP	#'L'		;LOAD
	BEQ	DUPLOA

	CMP	#'C'		;COPY
	BEQ	DUPCOP

	CMP	#'R'		;RENAME
DUPBL	BNE	DUPB
;	BEQ	DUPREN

;-------------------------------------------------------------------
;	RENAME FILE
;-------------------------------------------------------------------

DUPREN	LDA	EDBUF+$0E	;SEPARATOR
	EOR	EDBUF+$1A	;END
	BNE	DUPB		;ERROR, NOT THE SAME

	LDX	#2		;Dx:
	JSR	DUPCOD

	JSR	DOPEN1R		;OPEN #1 READ
	BMI	DUPB		;ERROR, CLOSE, EXIT

	LDA	#8		;CHANGE THIS CHANNEL TO WRITE
	STA	DMODE
	JSR	REABUF		;GET DIRECTORY SECTOR IN BUFFER
	BMI	DUPB		;ERROR ON READ

	LDX	DRPTR		;DIR POINTER
	DEY			;0
DUPWCH	LDA	EDBUF+$0F,Y	;FROM EDBUF
	STA	DWBUF+5,X	;TO WRITEBUF
	INX
	INY
	CPY	#11
	BNE	DUPWCH

	JSR	WRIBUF		;WRITE DIRECTORY
DUPBB	BMI	DUPB		;LONG, MINUS ERROR
DUPVV	BPL	DUPV

;-------------------------------------------------------------------
;	LOAD FILE (BAS OR OBJ)
;-------------------------------------------------------------------

DUPLOA	LDX	#0		;D
	LDA	EDBUF+1		;VALID ID = KNOWN FILENAME
	BPL	DUPLOAF		;COPY WHOLE NAME
	LDX	#2		;COPY Dx:
DUPLOAF	JSR	DUPCOD

	JSR	DOPEN1R
	BMI	DUPBB		;ERROR, CLOSE

	JSR	GET2BYT		;LOAD HEADER
	BMI	DUPBB		;ERROR, CLOSE

	LDY	#21		;LOAD ERROR
	LDA	DSKFMS+1	;$FF/$FF, BINARY FILE
	AND	DSKFMS
	CMP	#$FF
	BNE	DUPBL		;ERROR-21

	LDA	#NOMEM&$FF	;DEFAULT = RTS
	STA	RUNAD		;RUN-ADDRESS
	LDA	#NOMEM/256
	STA	RUNAD+1

	JSR	BLOAD		;LOAD/INIT/RUN !!! RETURN HERE IF NO INIT/RUN !!!

	LDA	COLDST		;CHECK IF AUTOLOADING (COLDSTART)
	BPL	DUPBB		;NO

	RTS			;YES, RETURN TO CALLER

;-------------------------------------------------------------------
;	COPY FILESPEC TO DRIVE"DUPDRV"
;-------------------------------------------------------------------

DUPCOP	LDA	EDBUF+1		;TARGET
	CMP	DIRSPE+1	;SOURCE
	BEQ	DUPVV		;SAME, NO ERROR, RETURN
	STA	DUPDRV		;STORE
	LDX	#2
	JSR	DUPCOD		;Dx: (SOURCE)

DUPCOPF	JSR	DOPEN1R		;OPEN #1
	BMI	DUPBB		;ERROR, CLOSE, EXIT
	LDA	DUPDRV
	STA	EDBUF+1		;OUTPUT DRIVE
	LDA	#$08		;WRITE
	STA	ICAX1+$20
	LDA	#OPEN		;OPEN
	JSR	DO2COM		;COMMAND #2
	BMI	DUPBB		;ERROR, CLOSE, EXIT

	LDA	#EDSIZ
	STA	ICBLL+$10	;BUFFER-LENGTH

DUPCOPY	JSR	DO1REA		;READ #1
	PHP			;STORE STATUS
	LDA	ICBLL+$10	;RECEIVED BYTES
	STA	ICBLL+$20	;BUFFER LENGTH
	LDA	#PUTCHR
	JSR	DO2COM		;COMMAND #2
	BMI	DUPBB		;ERROR WRITE, CLOSE
	PLP			;ERROR READ (EOF), CLOSE
	BPL	DUPCOPY		;READ STATUS OK, LOOP
	JMP	DUPV		;DONE, CLOSE, OK

;-------------------------------------------------------------------
;	ERROR-CODE
;-------------------------------------------------------------------

DUPBAD	LDX	#10
DUPRDY	LDA	DUPERR,X
DUPRD1	STA	EDBUF+0,X
	DEX
	BPL	DUPRDY

DECLO1	INC	EDBUF+9		;CALCULATE Y->3 DIGITS
	LDX	#2
DECCHK	LDA	EDBUF+7,X	;CHECK OVERFLOW
	CMP	#$BA
	BNE	DECOK		;NO
	LDA	#$B0		;YES, RESET TO ZERO
	STA	EDBUF+7,X	;STORE
	INC	EDBUF+6,X	;INCREASE NEXT DIGIT
	DEX			;NEXT DIGIT
	BPL	DECCHK		;LOOP OVERFLOW, 3 DIGITS TOTAL
DECOK	DEY
	BNE	DECLO1		;STOP WHEN Y=0

;-------------------------------------------------------------------
;	SCREEN OUTPUT
;-------------------------------------------------------------------

SCROUT	LDA	#PUTREC		;SEND

SCRCOM	LDX	#EDSIZ		;SEND OUT
	STX	ICBLL		;LENGTH

	STA	ICCOM		;COMMAND
SCRIO	LDX	#0		;IOCB-0
	JMP	CIOV		;RTS

;-------------------------------------------------------------------
;	FILENAME BUFFER
;-------------------------------------------------------------------

DUPCOM	LDX	#6		;COPY "Dx:*.*" TO $F80
DUPCOD	LDA	DIRSPE,X	;COPY LESS CHARACTERS
	STA	EDBUF,X
	DEX
	BPL	DUPCOD
	RTS

DIRSPE	.BYTE	"D1:*.*",$9B

DUPERR	.BYTE	$9D,"Error-",$B0,$B0,$B0,$9B

;-------------------------------------------------------------------
;	LOAD BASIC FILE
;-------------------------------------------------------------------
;
;DUPBAS	LDA	DSKFMS+1	;$00/$00, BASIC
;	ORA	DSKFMS
;DUPEE	BNE	DUPB		;ERROR, NO BASIC-FILE	
;
;	LDY	#12		;COPY [BASIC PAR]+[MEMLO] -> $80-$8D
;DUPBLO	CLC
;	LDA	DRBUF,Y		;LO
;	ADC	MEMLO
;	STA	$80,Y
;	LDA	DRBUF+1,Y	;HI
;	ADC	MEMLO+1
;	STA	$80+1,Y
;	DEY
;	DEY
;	BPL	DUPBLO		;$80-$8D
;
;	LDA	$82		;LOAD ADDRESS
;	STA	ICBAL+16
;	LDA	$83
;	STA	ICBAH+16
;
;	LDA	#14		;SHORT-CUT...
;	STA	DRPTR		;SET POINTER AFTER HEADER
;
;	SEC			;CALCULATE FILE SIZE
;	LDA	DRBUF+12
;	SBC	DRBUF+2
;	STA	ICBLL+16
;	LDA	DRBUF+13
;	SBC	DRBUF+3
;	STA	ICBLH+16
;
;	JSR	DO1REA		;READ #1
;	BMI	DUPERRL		;ERROR
;
;DUPBASE	LDA	$8C
;	STA	$8E
;	STA	$90
;	;STA	$0E		;???
;	LDA	$8D
;	STA	$8F
;	STA	$91
;	;STA	$0F		;???
;
;	JMP	WARMSV		;RESET/RETURN
;
;-------------------------------------------------------------------
	*=$0DFF
	.BYTE	$9B
;-------------------------------------------------------------------

	.END
